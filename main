def add(a, b):
    return a + b

def subtract(a, b):
    return a - b

if __name__ == "__main__":
    print("Calculator")
    print("1. Add")
    print("2. Subtract")
    choice = input("Select operation (1/2): ")
    
    num1 = float(input("Enter first number: "))
    num2 = float(input("Enter second number: "))
    
    if choice == '1':
        print("Result:", add(num1, num2))
    elif choice == '2':
        print("Result:", subtract(num1, num2))
    else:
        print("Invalid input")
#修改 `calculator.py`，添加乘除法功能：

```python
def multiply(a, b):
    return a * b

def divide(a, b):
    if b == 0:
        raise ValueError("Cannot divide by zero!")
    return a / b
# 修改主程序部分添加新选项
if __name__ == "__main__":
    print("Calculator")
    print("1. Add")
    print("2. Subtract")
    print("3. Multiply")
    print("4. Divide")
    choice = input("Select operation (1/2/3/4): ")
    
    num1 = float(input("Enter first number: "))
    num2 = float(input("Enter second number: "))
    
    if choice == '1':
        print("Result:", add(num1, num2))
    elif choice == '2':
        print("Result:", subtract(num1, num2))
    elif choice == '3':
        print("Result:", multiply(num1, num2))
    elif choice == '4':
        try:
            print("Result:", divide(num1, num2))
        except ValueError as e:
            print("Error:", e)
    else:
        print("Invalid input")
```
import unittest
import calculator

class TestCalculator(unittest.TestCase):
 """计算器单元测试"""
    
    def test_add(self):
        self.assertEqual(calculator.add(3, 4), 7)
        self.assertEqual(calculator.add(-1, 1), 0)
        self.assertAlmostEqual(calculator.add(0.1, 0.2), 0.3, places=7)
    
    def test_subtract(self):
        self.assertEqual(calculator.subtract(10, 5), 5)
        self.assertEqual(calculator.subtract(-1, -1), 0)
    
    def test_multiply(self):
        self.assertEqual(calculator.multiply(3, 4), 12)
        self.assertEqual(calculator.multiply(-2, 3), -6)
        self.assertEqual(calculator.multiply(0, 100), 0)
    
    def test_divide(self):
        self.assertEqual(calculator.divide(10, 2), 5)
        self.assertAlmostEqual(calculator.divide(1, 3), 0.3333333, places=7)
        with self.assertRaises(ValueError):
            calculator.divide(5, 0)
    
    def test_user_input_validation(self):
        # 这里可以添加模拟用户输入的测试
        pass

if __name__ == "__main__"：
    unittest.main()
